package com.niit.frontend.controler;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
//import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.niit.backend.Dao.BillingAddressDao;
import com.niit.backend.Dao.CardDao;
import com.niit.backend.Dao.CartDao;
import com.niit.backend.Dao.CartItemsDao;
import com.niit.backend.Dao.OrderDao;
import com.niit.backend.Dao.OrderItemsDao;
import com.niit.backend.Dao.PaymentDao;
import com.niit.backend.Dao.ProductDao;
import com.niit.backend.Dao.ShippingAddressDao;
import com.niit.backend.Dao.UsersDao;
import com.niit.backend.model.BillingAddress;
import com.niit.backend.model.Card;
import com.niit.backend.model.Cart;
import com.niit.backend.model.CartItem;
import com.niit.backend.model.Order;
import com.niit.backend.model.OrderItems;
import com.niit.backend.model.Payment;
import com.niit.backend.model.Product;
import com.niit.backend.model.ShippingAddress;
import com.niit.backend.model.Users;
import com.niit.frontend.Otp.Otpganarater;

@Controller
public class OrderController {


	@Autowired
	Cart cart;
	@Autowired
	CartDao cartDao;
	@Autowired
	CartItem cartItem;
	@Autowired
	CartItemsDao cartItemDao;
	@Autowired
	Card card;
	@Autowired
	CardDao cardDao;
	@Autowired
	BillingAddress billing;
	@Autowired
	BillingAddressDao billingDao;
	@Autowired
	ShippingAddress shippingAddress;
	@Autowired
	ShippingAddressDao shippingAddressDao;
	@Autowired
	Payment pay;
	@Autowired
	PaymentDao payDao;
	@Autowired
	Order order;
	@Autowired
	OrderDao orderDao;
	@Autowired
	OrderItems orderItems;
	@Autowired
	OrderItemsDao orderItemsDao;
	@Autowired
	Product product;
	@Autowired
	ProductDao productDao;
	@Autowired
	Users user;
	@Autowired
	UsersDao userDao;
	@Autowired
	List<CartItem> cartItems;
	
	@Autowired
    private JavaMailSender mailSender;
	
	String o;
	

	@RequestMapping("/Buyall")
	public String orderall(Model model,HttpSession session) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (!(authentication instanceof AnonymousAuthenticationToken)) {
			String currusername = authentication.getName();
			user = userDao.getUseremail(currusername);
			cart = user.getCart();
			product=null;
			cartItems = cartItemDao.getlist(cart.getCart_Id());
			if(cartItems==null || cartItems.isEmpty())
			{
				return "redirect:/viewcart";
			}
			else
			{
				billing = billingDao.getByUser(user.getU_id());
				List<ShippingAddress> shippingAddresies = shippingAddressDao.getaddbyuser(user.getU_id());
				System.out.println(billing);
				model.addAttribute("billing", billing);
				model.addAttribute("user", user);
				model.addAttribute("shippingAddresies", shippingAddresies);
				model.addAttribute("shippingAddress", new ShippingAddress());
				session.setAttribute("p", product);
			}
			return "addressorder";
		} else {
			return "redirect:/";
		}

	}

	@RequestMapping("/Buy/{p_id}/{ci_id}")
	public String order(@PathVariable("p_id") String id, Model model,HttpSession session) {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (!(authentication instanceof AnonymousAuthenticationToken)) {
			String currusername = authentication.getName();
			user = userDao.getUseremail(currusername);
			cart = user.getCart();
			cartItems=null;
			product = productDao.get(id);
			billing = billingDao.getByUser(user.getU_id());
			List<ShippingAddress> shippingAddresies = shippingAddressDao.getaddbyuser(user.getU_id());
			
			model.addAttribute("billing", billing);
			model.addAttribute("user", user);
			model.addAttribute("shippingAddresies", shippingAddresies);
			model.addAttribute("shippingAddress", new ShippingAddress());
			session.setAttribute("p", product);
			return "addressorder";
		} else {
			return "redirect:/";
		}

	}

	@RequestMapping("/orderConfirm")
	public String payment(@ModelAttribute("shippingAddress") ShippingAddress sh, Model model) {
//		if(cartItems==null || cartItems.isEmpty())
//		{
//			System.out.println("sorry");
//		}
		sh.setUser(user);
		shippingAddress = sh;
		model.addAttribute("billing", billing);
		model.addAttribute("shippingAddress", shippingAddress);
		model.addAttribute("prot", product);
		model.addAttribute("cartItems",cartItems);
		model.addAttribute("cart",cart);
		return "orderconfirm";
	}

	@RequestMapping("/previous")
	public String previous(Model model) {
		List<ShippingAddress> shippingAddresies = shippingAddressDao.getaddbyuser(user.getU_id());
		model.addAttribute("shippingAddresies", shippingAddresies);
		model.addAttribute("billing", billing);
		model.addAttribute("shippingAddress", shippingAddress);
		model.addAttribute("product", product);
		
		return "addressorder";
	}

	@RequestMapping("/pay")
	public String pay(Model model) {
		List<Card> cards = cardDao.getcardbyuser(user.getU_id());
		model.addAttribute("cards", cards);
		model.addAttribute("card", new Card());
		return "Payment";
	}

	@RequestMapping("/payment")
	public String payment(@RequestParam("payb") String str, @RequestParam("otp")String otp, @ModelAttribute("card")Card c, Model model) {
				
 		System.out.println(1324);
		int a;
		System.out.println(str);
				
		if (str.equalsIgnoreCase("Start Subscription")) {
			a = 2;
		} else {
			a = Integer.parseInt(str);
		}
		System.out.println(a);
		System.out.println(o);
		switch (a) {
		case 1:
				if(otp.equals(o))
				{
					pay.setPayment_method("COD");
					pay.setPayment_Status("no");
				}
				else
				{
					return "redirect:/pay";
				}
			 
			break;
		case 2:
			pay.setPayment_method("card");
			pay.setPayment_Status("yes");
			payDao.saveorupdate(pay);
			cardDao.saveorupdate(c);

			break;
		case 3:
			pay.setPayment_method("Internet Banking");
			pay.setPayment_Status("yes");

		}

		return "redirect:/orderconfirmation";
	}

	@RequestMapping("/orderconfirmation")
	public String orderconformation(HttpSession session) {
		System.out.println(32);
		order.setBillingAddress(billing);
		order.setShipingAddress(shippingAddress);
		order.setPayment(pay);
		order.setUser(user);
		System.out.println(524);
		if (cartItems == null || cartItems.isEmpty()) 
		{
			System.out.println(52664);
			order.setGrand_total(product.getP_c());
			System.out.println(product.getP_c());
//			orderDao.saveorupdate(order);
			orderItems.setOrder(order);
			orderItems.setP_id(product.getP_id());
			orderItemsDao.saveorupdate(orderItems);
			System.out.println(cartItem.getCartItem_Price()+"PRinting item price"+cart.getGrand_total() );
			System.out.println(cart.getGrand_total() - product.getP_c());
			System.out.println("printing Cart"+cart);
			Cart c=cart;
			c.setGrand_total(cart.getGrand_total() - product.getP_c());
			c.setTotal_item(cart.getTotal_item() - 1);
			session.setAttribute("items", cart.getTotal_item());
			cartDao.saveorupdate(c);
			
//			cartItemDao.delete(try);
			System.out.println(cartItemDao.getlistall(cart.getCart_Id(),product.getP_id()).getCartItem_Id());
			cartItem = cartItemDao.get(cartItemDao.getlistall(cart.getCart_Id(),product.getP_id()).getCartItem_Id());
			cartItemDao.delete(cartItem);
		}
		else
		{ 
			System.out.println(656);
			order.setGrand_total(cart.getGrand_total());
			orderDao.saveorupdate(order);
			for(CartItem c:cartItems)
			{
				System.out.println(3444);
				orderItems.setOrder(order);
				orderItems.setP_id(c.getProduct().getP_id());
				System.out.println(3443);
//				orderItemsDao.saveorupdate(orderItems);
				System.out.println(c.getCartItem_Id());
				cartItem = cartItemDao.get(c.getCartItem_Id());
				cartItemDao.delete(cartItem);
				System.out.println(3447);
			}
			System.out.println(3448);
			cart.setGrand_total(0.0);
			cart.setTotal_item(0);
			System.out.println(346);
			cart.setGrand_total(cart.getGrand_total() - cartItem.getCartItem_Price());
//			cart.setTotal_item(cart.getTotal_item() - 1);
			
			session.setAttribute("items", cart.getTotal_item());
//			cartDao.saveorupdate(cart);
		}
		cartItems=null;
		cartItem=null;
		product=null;
		order=new Order();
		orderItems=new OrderItems();
		System.out.println(565);
		return "thankyou";
	}

	@RequestMapping(value="/SendEmail",method = RequestMethod.GET)
    public String doSendEmail(HttpServletRequest request) 
    {
         // takes input from e-mail form
 
    	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (!(authentication instanceof AnonymousAuthenticationToken)) {
			String currusername = authentication.getName();
			user = userDao.getUseremail(currusername);      
			Otpganarater ot=new Otpganarater();
			 o=ot.Otpga();	
	   	String recipientAddress = user.getU_email();
	   	String subject="OTP";
//        String subject = request.getParameter("subject");
        String message = "your one time password is "+o+" ";
        
        // prints debug info
        System.out.println("To:" + recipientAddress);
        System.out.println("Subject: " + subject);
        System.out.println("Message: " + message);
        
            
        System.out.println("OTP:"+ o);
        // creates a simple e-mail object
        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(recipientAddress);
        email.setSubject(subject);
        email.setText(message);
        email.setSubject(o);
        // sends the e-mail
        mailSender.send(email);	        
         
        // forwards to the view named "Result"
        return "Result";
    }
		else
		{
			return "redirect:/";
		}
		
 }
@RequestMapping(value="/SendMail")
public void SendMail() {
	System.out.println(21312);
Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
if (!(authentication instanceof AnonymousAuthenticationToken)) {
	String currusername = authentication.getName();
	user = userDao.getUseremail(currusername);      
	Otpganarater ot=new Otpganarater();
//	String o=ot.Otpga();
	o=ot.Otpga();
	String recipientAddress = user.getU_email();
	String subject="OTP";
//String subject = request.getParameter("subject");
String message = "your one time password is "+o+" ";

// prints debug info
System.out.println("To:" + recipientAddress);
System.out.println("Subject: " + subject);
System.out.println("Message: " + message);

    
//System.out.println("OTP:"+ otp);
// creates a simple e-mail object
SimpleMailMessage email = new SimpleMailMessage();
email.setTo(recipientAddress);
email.setSubject(subject);
email.setText(message);
//email.setSubject(otp);
// sends the e-mail
mailSender.send(email);

 
// forwards to the view named "Result"
//return "Result";
}
}
}